// Code generated by MockGen. DO NOT EDIT.
// Source: cmd/argo-watcher/state/state.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	config "github.com/shini4i/argo-watcher/cmd/argo-watcher/config"
	models "github.com/shini4i/argo-watcher/internal/models"
)

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockState) Add(task models.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", task)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockStateMockRecorder) Add(task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockState)(nil).Add), task)
}

// Check mocks base method.
func (m *MockState) Check() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Check indicates an expected call of Check.
func (mr *MockStateMockRecorder) Check() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockState)(nil).Check))
}

// Connect mocks base method.
func (m *MockState) Connect(serverConfig *config.ServerConfig) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Connect", serverConfig)
}

// Connect indicates an expected call of Connect.
func (mr *MockStateMockRecorder) Connect(serverConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockState)(nil).Connect), serverConfig)
}

// GetAppList mocks base method.
func (m *MockState) GetAppList() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppList")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetAppList indicates an expected call of GetAppList.
func (mr *MockStateMockRecorder) GetAppList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppList", reflect.TypeOf((*MockState)(nil).GetAppList))
}

// GetTask mocks base method.
func (m *MockState) GetTask(id string) (*models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", id)
	ret0, _ := ret[0].(*models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask.
func (mr *MockStateMockRecorder) GetTask(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockState)(nil).GetTask), id)
}

// GetTasks mocks base method.
func (m *MockState) GetTasks(startTime, endTime float64, app string) []models.Task {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasks", startTime, endTime, app)
	ret0, _ := ret[0].([]models.Task)
	return ret0
}

// GetTasks indicates an expected call of GetTasks.
func (mr *MockStateMockRecorder) GetTasks(startTime, endTime, app interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasks", reflect.TypeOf((*MockState)(nil).GetTasks), startTime, endTime, app)
}

// ProcessObsoleteTasks mocks base method.
func (m *MockState) ProcessObsoleteTasks() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ProcessObsoleteTasks")
}

// ProcessObsoleteTasks indicates an expected call of ProcessObsoleteTasks.
func (mr *MockStateMockRecorder) ProcessObsoleteTasks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessObsoleteTasks", reflect.TypeOf((*MockState)(nil).ProcessObsoleteTasks))
}

// SetTaskStatus mocks base method.
func (m *MockState) SetTaskStatus(id, status, reason string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTaskStatus", id, status, reason)
}

// SetTaskStatus indicates an expected call of SetTaskStatus.
func (mr *MockStateMockRecorder) SetTaskStatus(id, status, reason interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTaskStatus", reflect.TypeOf((*MockState)(nil).SetTaskStatus), id, status, reason)
}
